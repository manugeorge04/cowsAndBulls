{"version":3,"sources":["webpack:///./src/components/Alert.js","webpack:///./src/components/InputTextBoxes.js","webpack:///./src/components/GameHeader.js","webpack:///./src/components/UserGuess.js","webpack:///./src/pages/Cowputer.js","webpack:///./src/utils/gameLogic.js"],"names":["useStyles","makeStyles","theme","root","fontSize","Alert","severity","message","open","handleOnClose","classes","Snackbar","autoHideDuration","onClose","className","elevation","variant","textbox","margin","spacing","width","height","breakpoints","down","paddingLeft","paddingRight","InputTextBoxes","forwardRef","ref","handleOnChange","guessWord","handleOnKeyDown","id","disabled","letter1Ref","useRef","letter2Ref","letter3Ref","letter4Ref","useImperativeHandle","focusBox1","current","focus","focusBox2","focusBox3","focusBox4","scrollToEnd","scrollIntoView","behavior","TextField","value","letter1","onChange","inputRef","letter2","letter3","letter4","onKeyDown","cheer","Icon","GameHeaderCheer","Typography","align","GameHeaderCheerMobile","GameHeader","useState","setGuessWord","onlyAlphabets","RegExp","isPC","useMediaQuery","noSsr","e","letter","target","slice","toUpperCase","test","src","slNo","UserGuess","word","bull","cow","guessRef","useEffect","Cowputer","props","useContext","MyContext","setSubHeader","subHeader","socket","setCurrentGame","currentGame","alert","setAlert","guesses","setGuesses","emit","roomId","mode","currentRound","rounds","updateGuesses","cowScore","bullScore","length","Object","keys","winCount","Math","ceil","handleResults","noOfGuesses","maxGuesses","type","result","map","guess","index","key","join","includes","letters","split","setLetters","Set","hasRepeatingLetter","toLowerCase","once","getCowsAndBulls","match","params"],"mappings":"qMAKMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,sBAAuB,CACrBC,SAAS,eAkBAC,EAZD,SAAC,GAA6C,IAA5CC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,cACjCC,EAASV,IAEf,OACE,kBAACW,EAAA,EAAD,CAAUH,KAAMA,EAAMI,iBAAkB,IAAMC,QAASJ,GACrD,kBAAC,IAAD,CAAUK,UAAWJ,EAAQP,KAAOG,SAAUA,EAAUS,UAAW,EAAGC,QAAQ,UAC3ET,K,2BCjBHP,EAAYC,aAAW,SAACC,GAAD,YAAY,CACvCe,SAAO,GACLC,OAAQhB,EAAMiB,QAAQ,GACtBC,MAAO,SACPC,OAAO,QAHF,MAIJnB,EAAMoB,YAAYC,KAAK,MAAQ,CAC9BH,MAAO,QACPC,OAAO,SANJ,kBAQM,UARN,MASL,wBATK,KAUHjB,SAAU,OACVoB,YAAa,UACZtB,EAAMoB,YAAYC,KAAK,MAAQ,CAC9BnB,SAAU,YAbT,MAgBL,4BAhBK,OAiBFF,EAAMoB,YAAYC,KAAK,MAAQ,CAC9BC,YAAa,OACbC,aAAc,YAnBb,MAsBL,uBAtBK,KAuBHJ,OAAO,QACNnB,EAAMoB,YAAYC,KAAK,MAAQ,CAC9BF,OAAO,UAzBN,OAuFMK,EAxDQC,sBAAW,WAAsEC,GAAQ,IAA5EC,EAA4E,EAA5EA,eAAgBb,EAA4D,EAA5DA,QAASc,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,gBAAiBC,EAAuB,EAAvBA,GAAIC,EAAmB,EAAnBA,SAErFC,EAAaC,iBAAO,MACpBC,EAAaD,iBAAO,MACpBE,EAAaF,iBAAO,MACpBG,EAAaH,iBAAO,MAE1BI,8BAAoBX,GAAK,iBAAO,CAC9BY,UAAW,kBAAMN,EAAWO,QAAQC,SACpCC,UAAW,kBAAMP,EAAWK,QAAQC,SACpCE,UAAW,kBAAMP,EAAWI,QAAQC,SACpCG,UAAW,kBAAMP,EAAWG,QAAQC,SACpCI,YAAc,kBAAMR,EAAWG,QAAQM,eAAe,CAAEC,SAAU,gBAGpE,IAAMtC,EAASV,IAEf,OACE,kBAAC,WAAD,KACE,kBAACiD,EAAA,EAAD,CAAanC,UAAWJ,EAAQO,QAC9Be,GAAE,UAAOA,EAAP,YACFkB,MAASpB,EAAUqB,QACnBC,SAAYvB,EACZwB,SAAYnB,EACZlB,QAAWA,EACXiB,SAAUA,IAEZ,kBAACgB,EAAA,EAAD,CAAanC,UAAWJ,EAAQO,QAC9Be,GAAE,UAAOA,EAAP,YACFkB,MAASpB,EAAUwB,QACnBF,SAAYvB,EACZwB,SAAYjB,EACZpB,QAAWA,EACXiB,SAAUA,IAEZ,kBAACgB,EAAA,EAAD,CAAanC,UAAWJ,EAAQO,QAC9Be,GAAE,UAAOA,EAAP,YACFkB,MAASpB,EAAUyB,QACnBH,SAAYvB,EACZwB,SAAYhB,EACZrB,QAAWA,EACXiB,SAAUA,IAEZ,kBAACgB,EAAA,EAAD,CAAanC,UAAWJ,EAAQO,QAC9Be,GAAE,UAAOA,EAAP,YACFkB,MAASpB,EAAU0B,QACnBJ,SAAYvB,EACZwB,SAAYf,EACZtB,QAAWA,EACXiB,SAAUA,EACVwB,UAAY1B,Q,ikBChFpB,IAAM/B,EAAYC,aAAW,SAACC,GAAD,YAAY,CACvCwD,MAAO,CACLtC,MAAM,OAERuC,MAAI,GACFvC,MAAO,OADL,MAEDlB,EAAMoB,YAAYC,KAAK,MAAQ,CAC9BH,MAAO,QAHP,eAKM,QALN,OAUAwC,EAAkB,WACtB,IAAMlD,EAAUV,IAEhB,OACE,yBAAKc,UAAU,qBACb,kBAAC+C,EAAA,EAAD,CAAY/C,UAAWJ,EAAQgD,MAAO1C,QAAQ,KAAK8C,MAAM,UAAzD,WAGA,kBAACD,EAAA,EAAD,CAAY/C,UAAWJ,EAAQgD,MAAO1C,QAAQ,KAAK8C,MAAM,UAAzD,iBAOAC,EAAwB,WAC5B,IAAMrD,EAAUV,IAEhB,OACE,yBAAKc,UAAU,6BACb,kBAAC+C,EAAA,EAAD,CAAY/C,UAAWJ,EAAQgD,MAAO1C,QAAQ,KAAK8C,MAAM,aA+DhDE,EAxDI,WAEjB,IAAMtD,EAAUV,IAFO,EAIWiE,mBAChC,CACEd,QAAQ,GACRG,QAAQ,GACRC,QAAQ,GACRC,QAAQ,KATW,WAIhB1B,EAJgB,KAILoC,EAJK,KAajBb,EAAWlB,iBAAO,MAElBgC,EAAgB,IAAIC,OAAO,YAe3BC,EAAOC,YAAc,oBAAqB,CAACC,OAAM,IAEvD,OACE,kBAAC,WAAD,KACA,yBAAKzD,UAAU,cACZuD,EAAM,kBAAC,EAAD,MAAqB,kBAAC,EAAD,MAC9B,yBAAKvD,UAAU,qBACb,kBAAC,EAAD,CACEkB,GAAK,aACLH,eAtBiB,SAAC2C,GACtB,IAAIC,EAASD,EAAEE,OAAOxB,MAAMyB,OAAO,GAAGC,cAClCH,IAAW3C,EAAU0C,EAAEE,OAAO1C,GAAG2C,OAAO,MAC1CF,EAASD,EAAEE,OAAOxB,MAAM,GAAG0B,gBAEzBT,EAAcU,KAAKJ,IAAsB,KAAXA,IAChCP,EAAY,OAAMpC,GAAN,UAAkB0C,EAAEE,OAAO1C,GAAG2C,OAAO,GAAIF,KAExC,KAAXA,IACwB,YAA1BD,EAAEE,OAAO1C,GAAG2C,OAAO,GAAmBtB,EAASZ,QAAQE,YAAwC,YAA1B6B,EAAEE,OAAO1C,GAAG2C,OAAO,GAAmBtB,EAASZ,QAAQG,YAAcS,EAASZ,QAAQI,cAczJ7B,QAAW,WACXY,IAAOyB,EACPvB,UAAaA,EACbG,UAAY,EACZF,gBAAmB,gBAGrB,yBAAKjB,UAAU,qBACb,2BAAQA,UAAWJ,EAAQiD,KAAMmB,IAAI,mBACrC,2BAAQhE,UAAWJ,EAAQiD,KAAMmB,IAAI,wB,ikBC1F7C,IAAM9E,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvC6E,KAAM,CACJ3D,MAAM,WAkEK4D,EA9DG,SAAC,GAAwD,IAAvDD,EAAuD,EAAvDA,KAAMhD,EAAiD,EAAjDA,gBAAgBE,EAAiC,EAAjCA,SAAWgD,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IAAU,EAEvClB,mBAASgB,GAF8B,WAElEnD,EAFkE,KAEvDoC,EAFuD,KAInEkB,EAAWjD,iBAAO,MAElBgC,EAAgB,IAAIC,OAAO,YAejCiB,qBAAU,WACRD,EAAS3C,QAAQD,YACjB4C,EAAS3C,QAAQK,gBACjB,IAEF,IAAMpC,EAAUV,IAEhB,OACE,yBAAKc,UAAY,YACf,yBAAKA,UAAU,QACb,kBAAC+C,EAAA,EAAD,CAAY/C,UAAWJ,EAAQqE,KAAM/D,QAAQ,KAAK8C,MAAM,UACrDiB,IAGL,yBAAKjE,UAAU,aACb,kBAAC,EAAD,CACEkB,GAAM+C,EACNlD,eA9Be,SAAC2C,GACtB,IAAIC,EAASD,EAAEE,OAAOxB,MAAMyB,OAAO,GAAGC,cAClCH,IAAW3C,EAAU0C,EAAEE,OAAO1C,GAAG2C,OAAO,MAC1CF,EAASD,EAAEE,OAAOxB,MAAM,GAAG0B,gBAEzBT,EAAcU,KAAKJ,IAAsB,KAAXA,IAChCP,EAAY,OAAMpC,GAAN,UAAkB0C,EAAEE,OAAO1C,GAAG2C,OAAO,GAAIF,KAEnDN,EAAcU,KAAKJ,KACK,YAA1BD,EAAEE,OAAO1C,GAAG2C,OAAO,GAAmBS,EAAS3C,QAAQE,YAAwC,YAA1B6B,EAAEE,OAAO1C,GAAG2C,OAAO,GAAmBS,EAAS3C,QAAQG,YAAcwC,EAAS3C,QAAQI,cAsBvJ7B,QAAW,WACXY,IAAOwD,EACPtD,UAAaA,EACbG,SAAYA,EACZF,gBAAmB,SAACyC,GAAD,OAAOzC,EAAgBD,EAAhBC,CAA2ByC,OAIzD,yBAAK1D,UAAY,YACf,kBAAC+C,EAAA,EAAD,CAAY/C,UAAWJ,EAAQqE,KAAM/D,QAAQ,KAAK8C,MAAM,UACrDqB,IAGL,yBAAKrE,UAAY,aACf,kBAAC+C,EAAA,EAAD,CAAY/C,UAAWJ,EAAQqE,KAAM/D,QAAQ,KAAK8C,MAAM,UACrDoB,M,ykBC8FII,UAvJE,SAACC,GAAU,MAE6CC,qBAAWC,KAAhEC,GAFQ,EAEnBC,UAFmB,EAERD,cAAcE,EAFN,EAEMA,OAAQC,EAFd,EAEcA,eAAgBC,EAF9B,EAE8BA,YAF9B,EAIA7B,mBAAS,CAACzD,MAAK,IAJf,WAInBuF,EAJmB,KAIZC,EAJY,OAKG/B,mBAAS,IALZ,WAKnBgC,EALmB,KAKXC,EALW,KAW1Bb,qBAAU,WACRO,EAAOO,KAAK,aAAcL,EAAYM,QACtCV,EAAa,WAAD,OAAYI,EAAYO,KAAxB,aAAiCP,EAAYQ,aAA7C,YAA6DR,EAAYS,OAAzE,QACX,CAACT,EAAYQ,eAEhB,IAAME,EAAgB,SAAC1E,EAAU2E,EAAUC,GACzCR,EAAW,GAAD,WACLD,GADK,CAER,CACElB,KAAMkB,EAAQU,OAAS,EACvB1B,KAAM,CACJ9B,QAAUrB,EAAUqB,QACpBG,QAAUxB,EAAUwB,QACpBC,QAAUzB,EAAUyB,QACpBC,QAAU1B,EAAU0B,SAEtB0B,KAAMwB,EACNvB,IAAKsB,MAIO,IAAbA,GAAkBC,IAAcE,OAAOC,KAAK/E,GAAW6E,OACrDb,EAAYS,QAAUT,EAAYQ,aAC9BR,EAAYgB,SAAW,GAAKC,KAAKC,KAAKlB,EAAYS,OAAO,GACxDU,EAAc,OAAO,GAErBA,EAAc,OAAO,IAGzBpB,EAAe,OACRC,GADO,IAEVQ,aAAcR,EAAYQ,aAAe,EACzCQ,SAAUhB,EAAYgB,SAAW,EACjCI,YAAa,EACbC,WAAYrB,EAAYqB,WAAa,KAEzCF,EAAc,SAAS,IAErBnB,EAAYoB,YAAc,IAAMpB,EAAYqB,WAC/CrB,EAAYS,QAAUT,EAAYQ,aAC9BR,EAAYgB,SAAW,GAAKC,KAAKC,KAAKlB,EAAYS,OAAO,GACxDU,EAAc,OAAO,GAErBA,EAAc,OAAO,IAGzBpB,EAAe,OACRC,GADO,IAEVQ,aAAcR,EAAYQ,aAAe,EACzCY,YAAa,EACbC,WAAYrB,EAAYqB,WAAa,KAEzCF,EAAc,SAAS,IAGvBpB,EAAe,OACRC,GADO,IAEVoB,YAAapB,EAAYoB,YAAc,MAM7CD,EAAgB,SAACG,EAAMC,GAC3BnB,EAAW,IACC,UAATkB,EAEDpB,EAAS,CACPxF,MAAK,EACLD,QAAS8G,EAAS,sBAAwB,uBAC1C/G,SAAU,SAGO,QAAT8G,GACVpB,EAAS,CACPxF,MAAK,EACLD,QAAS8G,EAAS,WAAa,YAC/B/G,SAAU+G,EAAS,UAAY,aAoCrC,OACE,yBAAKvG,UAAU,aACb,kBAAC,EAAD,MACCmF,EAAQqB,KAAI,SAACC,EAAOC,GAAR,OACX,kBAAC,EAAD,CACEC,IAAMD,EACNzC,KAAQwC,EAAMxC,KACdE,KAAQsC,EAAMtC,KACdC,KAAQqC,EAAMrC,KACdC,IAAOoC,EAAMpC,IACblD,UAAY,OAGhB,kBAAC,EAAD,CACEwF,IAAKxB,EAAQU,OAAO,EACpB5B,KAAQkB,EAAQU,OAAO,EACvB5E,gBA7CkB,SAACD,GAAD,OAAe,SAAC0C,GACtC,GAAc,UAAVA,EAAEiD,IAAgB,CACpB,IAAIxC,EAAO,CAACnD,EAAUqB,QAASrB,EAAUwB,QAASxB,EAAUyB,QAASzB,EAAU0B,SAASkE,KAAK,IACzFzC,EAAK0C,SAAS,MAAS1C,EAAK0B,OAAO,EACrCX,EAAS,CACPxF,MAAK,EACLD,QAAS,+BACTD,SAAU,UC3Gc,SAAC2E,GAC/B,IAAM2C,EAAU3C,EAAK4C,MAAM,IACrBC,EAAa,IAAI,IAAIC,IAAIH,IAC/B,OAAOA,EAAQjB,SAAWmB,EAAWnB,OD0GzBqB,CAAmB/C,GAC3Be,EAAS,CACPxF,MAAK,EACLD,QAAS,oDACTD,SAAU,UC1GW,SAACiH,EAAOnB,EAAQR,EAC3CY,EAAe1E,GACfyF,EAAQA,EAAMU,cAEdrC,EAAOsC,KAAK,qBAAqB,YAA0B,IAAxBzB,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,UACzCF,EAAc1E,EAAW2E,EAAUC,MAGvCd,EAAOO,KAAK,WAAYoB,EAAOnB,GDqG3B+B,CAAgBlD,EAAMM,EAAM6C,MAAMC,OAAOjC,OAAQR,EAC/CY,EAAe1E,MA6BjBmD,KAxBa,CACjB9B,QAAQ,GACRG,QAAQ,GACRC,QAAQ,GACRC,QAAQ,IAqBJ0B,KAAQ,GACRC,IAAO,GACPlD,UAAY,IAEhB,kBAAC,EAAD,CAAO3B,SAAUyF,EAAMzF,SAAUC,QAAWwF,EAAMxF,QAASC,KAAMuF,EAAMvF,KAAMC,cA3IzD,WACpBuF,EAAS,OAAID,GAAL,IAAYvF,MAAK","file":"11.bundle.js","sourcesContent":["import { makeStyles } from '@material-ui/core';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport React from 'react'\n\nconst useStyles = makeStyles((theme) => ({\n  root :{\n    \"& .MuiAlert-message\" :{\n      fontSize:'1.2rem'\n    }\n  }\n}))\n\n\nconst Alert = ({severity, message, open, handleOnClose}) => {\n  const classes= useStyles()\n\n  return(\n    <Snackbar open={open} autoHideDuration={5000} onClose={handleOnClose}>\n      <MuiAlert className={classes.root}  severity={severity} elevation={6} variant=\"filled\">\n        {message}\n      </MuiAlert>\n    </Snackbar>\n  )  \n}\n\nexport default Alert\n\n//onClose={handleOnClose} add this as prop to MuiAlert if you want a dedicated close button","import { makeStyles, TextField } from '@material-ui/core'\nimport React, { forwardRef, Fragment, useImperativeHandle, useRef } from 'react'\n\nconst useStyles = makeStyles((theme) => ({\n  textbox:{\n    margin: theme.spacing(1),    \n    width: '5.7rem',\n    height:'5rem' ,\n    [theme.breakpoints.down('sm')]: {\n      width: '12rem',\n      height:'4rem' ,\n    },                \n    textAlign: 'center',\n    '& .MuiInputBase-input':{\n      fontSize: '3rem',     \n      paddingLeft: '1.5rem', \n      [theme.breakpoints.down('sm')]: {        \n        fontSize: '1.5rem',         \n      },          \n    },\n    '& .MuiOutlinedInput-input':{\n      [theme.breakpoints.down('sm')]: {                \n        paddingLeft: '1rem',\n        paddingRight: '0.7rem',\n      },                \n    },\n    '& .MuiInputBase-root':{\n      height:'5rem',      \n      [theme.breakpoints.down('sm')]: {        \n        height:'4rem',              \n      },          \n    }     \n    },\n}))\n\nconst InputTextBoxes = forwardRef(({handleOnChange, variant, guessWord, handleOnKeyDown, id, disabled}, ref) => {\n\n  const letter1Ref = useRef(null)\n  const letter2Ref = useRef(null)\n  const letter3Ref = useRef(null)\n  const letter4Ref = useRef(null)\n\n  useImperativeHandle(ref, () => ({\n    focusBox1: () => letter1Ref.current.focus(),\n    focusBox2: () => letter2Ref.current.focus(),\n    focusBox3: () => letter3Ref.current.focus(),\n    focusBox4: () => letter4Ref.current.focus(),\n    scrollToEnd : () => letter4Ref.current.scrollIntoView({ behavior: 'smooth' }),\n  }))\n\n  const classes= useStyles();\n\n  return(\n    <Fragment>    \n      <TextField   className={classes.textbox}\n        id = {`${id}_letter1`}\n        value = {guessWord.letter1}\n        onChange = {handleOnChange}\n        inputRef\t= {letter1Ref}\n        variant = {variant}      \n        disabled={disabled}  \n      />\n      <TextField   className={classes.textbox}\n        id = {`${id}_letter2`}\n        value = {guessWord.letter2}\n        onChange = {handleOnChange}\n        inputRef\t= {letter2Ref}\n        variant = {variant}        \n        disabled={disabled}  \n      />\n      <TextField   className={classes.textbox}\n        id = {`${id}_letter3`}\n        value = {guessWord.letter3}\n        onChange = {handleOnChange}\n        inputRef\t= {letter3Ref}\n        variant = {variant}      \n        disabled={disabled}    \n      />\n      <TextField   className={classes.textbox}\n        id = {`${id}_letter4`}\n        value = {guessWord.letter4}\n        onChange = {handleOnChange}\n        inputRef\t= {letter4Ref}\n        variant = {variant} \n        disabled={disabled}  \n        onKeyDown= {handleOnKeyDown}\n      />                \n    </Fragment>\n  )    \n})\n\nexport default InputTextBoxes;","import { makeStyles, Typography, useMediaQuery } from '@material-ui/core'\nimport React, { Fragment, useRef, useState } from 'react'\nimport InputTextBoxes from './InputTextBoxes'\n\n\nconst useStyles = makeStyles((theme) => ({  \n  cheer: {    \n    width:'90%',    \n  },\n  Icon: {\n    width: '20%',\n    [theme.breakpoints.down('sm')]: {\n      width: \"30%\",            \n    },\n    height: 'auto'\n  },\n})\n)\n\nconst GameHeaderCheer = () => {\n  const classes = useStyles()\n\n  return(\n    <div className=\"gameHeader__cheer\">\n      <Typography className={classes.cheer} variant=\"h4\" align=\"center\">\n        Player,\n      </Typography>\n      <Typography className={classes.cheer} variant=\"h4\" align=\"center\">\n        Your Moove!\n      </Typography>\n    </div>\n  )\n}\n\nconst GameHeaderCheerMobile = () => {\n  const classes = useStyles()\n\n  return(\n    <div className=\"gameHeader__cheer__mobile\">\n      <Typography className={classes.cheer} variant=\"h5\" align=\"center\">\n        \n      </Typography>      \n    </div>\n  )\n}\n\nconst GameHeader = () => {\n\n  const classes = useStyles()\n\n  const [guessWord, setGuessWord] = useState(\n    {\n      letter1:\"\",\n      letter2:\"\",\n      letter3:\"\",\n      letter4:\"\",\n    }\n  )\n\n  const inputRef = useRef(null)\n    \n  const onlyAlphabets = new RegExp(/[a-zA-Z]/);\n  \n  const handleOnChange = (e) => {\n    let letter = e.target.value.slice(-1).toUpperCase()    \n    if (letter === guessWord[e.target.id.slice(-7)]){\n      letter = e.target.value[0].toUpperCase()\n    }     \n    if (onlyAlphabets.test(letter) || letter === \"\") {\n      setGuessWord ({...guessWord, [e.target.id.slice(-7)]:letter})      \n    }\n    if (letter !== \"\"){\n      e.target.id.slice(-7) === \"letter1\" ? inputRef.current.focusBox2() : e.target.id.slice(-7) === \"letter2\" ? inputRef.current.focusBox3() : inputRef.current.focusBox4()\n    }\n  }\n  \n  const isPC = useMediaQuery(\"(min-width:45rem)\", {noSsr:true})\n  \n  return(\n    <Fragment>          \n    <div className=\"gameHeader\">      \n      {isPC ?<GameHeaderCheer/> : <GameHeaderCheerMobile/> }\n    <div className=\"gameHeader__guess\">          \n      <InputTextBoxes    \n        id = \"gameHeader\"     \n        handleOnChange={handleOnChange}\n        variant = {\"standard\"}\n        ref = {inputRef}\n        guessWord = {guessWord}\n        disabled = {false}\n        handleOnKeyDown = {() => {}}\n      />            \n    </div>  \n      <div className=\"gameHeader__score\">\n        <embed  className={classes.Icon} src=\"images/cow.svg\" />\n        <embed  className={classes.Icon} src=\"images/bull.svg\" />\n      </div>\n    </div>\n    </Fragment>\n  )  \n}\n\nexport default GameHeader\n","import { makeStyles, Typography } from '@material-ui/core'\nimport React, { useState, useRef, Fragment, useEffect } from 'react'\nimport InputTextBoxes from './InputTextBoxes'\n\n\nconst useStyles = makeStyles((theme) => ({\n  slNo: {    \n    width:'90%',    \n  },\n}))\n\nconst UserGuess = ({slNo, handleOnKeyDown,disabled , word, bull, cow }) => {\n\n  const [guessWord, setGuessWord] = useState(word);  \n  \n  const guessRef = useRef(null)\n    \n  const onlyAlphabets = new RegExp(/[a-zA-Z]/);\n  \n  const handleOnChange = (e) => {\n    let letter = e.target.value.slice(-1).toUpperCase()      \n    if (letter === guessWord[e.target.id.slice(-7)]){\n      letter = e.target.value[0].toUpperCase()\n    }     \n    if (onlyAlphabets.test(letter) || letter === \"\") {\n      setGuessWord ({...guessWord, [e.target.id.slice(-7)]:letter})      \n    }\n    if (onlyAlphabets.test(letter)){\n      e.target.id.slice(-7) === \"letter1\" ? guessRef.current.focusBox2() : e.target.id.slice(-7) === \"letter2\" ? guessRef.current.focusBox3() : guessRef.current.focusBox4()\n    }\n  }  \n\n  useEffect(() => {\n    guessRef.current.focusBox1()\n    guessRef.current.scrollToEnd()\n  },[])\n\n  const classes = useStyles();\n\n  return(\n    <div className = \"gameBody\">\n      <div className=\"slNo\">\n        <Typography className={classes.slNo} variant=\"h4\" align=\"center\">\n          {slNo}\n        </Typography>\n      </div>      \n      <div className=\"userGuess\">\n        <InputTextBoxes                      //new user input\n          id = {slNo}     \n          handleOnChange={handleOnChange}\n          variant = {\"outlined\"}\n          ref = {guessRef}\n          guessWord = {guessWord}\n          disabled = {disabled}\n          handleOnKeyDown = {(e) => handleOnKeyDown(guessWord)(e)}\n        />       \n      </div>\n\n      <div className = \"cowScore\">\n        <Typography className={classes.slNo} variant=\"h4\" align=\"center\">\n          {cow}\n        </Typography>\n      </div>\n      <div className = \"bullScore\">\n        <Typography className={classes.slNo} variant=\"h4\" align=\"center\">\n          {bull}\n        </Typography>\n      </div>\n    </div>\n\n  )\n}\n\nexport default UserGuess","import React, { useEffect, useContext, useState } from 'react';\nimport Alert from '../components/Alert';\nimport GameHeader from '../components/GameHeader';\nimport UserGuess from '../components/UserGuess';\nimport MyContext from '../context/MyContext';\nimport {hasRepeatingLetter, getCowsAndBulls} from '../utils/gameLogic'\n\n\nconst Cowputer = (props) => {\n\n  const {subHeader, setSubHeader, socket, setCurrentGame, currentGame} = useContext(MyContext)\n\n  const [alert, setAlert] = useState({open:false})  \n  const [guesses,setGuesses] = useState([]) //slNo, word, bull, cow\n\n  const handleOnClose = () => {    \n    setAlert({...alert, open:false});\n  };\n\n  useEffect(() => {\n    socket.emit('createWord', currentGame.roomId)\n    setSubHeader(`Playing ${currentGame.mode} (${currentGame.currentRound}/${currentGame.rounds})`);\n  }, [currentGame.currentRound])\n\n  const updateGuesses = (guessWord,cowScore, bullScore) => {\n    setGuesses([\n      ...guesses,\n      {\n        slNo: guesses.length + 1,\n        word: {\n          letter1 : guessWord.letter1,\n          letter2 : guessWord.letter2,\n          letter3 : guessWord.letter3,\n          letter4 : guessWord.letter4,\n        },\n        bull: bullScore,\n        cow: cowScore\n      }\n    ])\n    \n    if(cowScore === 0 && bullScore === Object.keys(guessWord).length) {\n      if(currentGame.rounds == currentGame.currentRound) {\n          if(currentGame.winCount + 1 >= Math.ceil(currentGame.rounds/2)) {\n              handleResults(\"end\", true)\n          } else {\n              handleResults(\"end\", false)\n          }\n      } else {\n          setCurrentGame({\n              ...currentGame, \n              currentRound: currentGame.currentRound + 1,\n              winCount: currentGame.winCount + 1,\n              noOfGuesses: 0,\n              maxGuesses: currentGame.maxGuesses - 2\n          })\n          handleResults(\"round\", true)\n      }\n  } else if(currentGame.noOfGuesses + 1 === currentGame.maxGuesses) {\n      if(currentGame.rounds == currentGame.currentRound) {\n          if(currentGame.winCount + 1 >= Math.ceil(currentGame.rounds/2)) {\n              handleResults(\"end\", true)\n          } else {\n              handleResults(\"end\", false)\n          }\n      } else {\n          setCurrentGame({\n              ...currentGame, \n              currentRound: currentGame.currentRound + 1,\n              noOfGuesses: 0,\n              maxGuesses: currentGame.maxGuesses + 2\n          })\n          handleResults(\"round\", false)\n      }\n  } else {\n          setCurrentGame({\n              ...currentGame,\n              noOfGuesses: currentGame.noOfGuesses + 1\n            });   \n      \n  }\n  };\n\n  const handleResults = (type, result) => {\n    setGuesses([]);\n    if(type === 'round') {\n\n      setAlert({\n        open:true,\n        message: result ? 'You won this round!' : 'You lost this round!',\n        severity: \"info\"\n      })    \n\n     } else if (type === 'end') {\n      setAlert({\n        open:true,\n        message: result ? 'You won!' : 'You lost!',\n        severity: result ? \"success\" : 'warning'\n      })  \n      // popup \n\n    }\n  }\n\n  const handleOnKeyDown = (guessWord) => (e) => {\n    if (e.key === \"Enter\"){\n      let word = [guessWord.letter1, guessWord.letter2, guessWord.letter3, guessWord.letter4].join(\"\")    \n      if (word.includes(\" \") || (word.length<4)){        \n        setAlert({\n          open:true,\n          message: \"Please enter a 4 letter word\",\n          severity: \"error\"\n        })        \n      }else if (hasRepeatingLetter(word)) {\n        setAlert({\n          open:true,\n          message: \"Please enter a word with non-repeating characters\",\n          severity: \"error\"\n        })        \n      }else{\n        getCowsAndBulls(word, props.match.params.roomId, socket, \n          updateGuesses, guessWord)             \n      }\n    }\n  }\n\n  const emptyGuess = {\n    letter1:\"\",\n    letter2:\"\",\n    letter3:\"\",\n    letter4:\"\",\n  }\n\n  return (\n    <div className=\"container\">\n      <GameHeader />  \n      {guesses.map((guess, index) =>                 \n        <UserGuess\n          key= {index}\n          slNo = {guess.slNo}          \n          word = {guess.word}\n          bull = {guess.bull}\n          cow = {guess.cow}\n          disabled = {true}\n        />\n      )}    \n      <UserGuess\n        key={guesses.length+1}\n        slNo = {guesses.length+1}\n        handleOnKeyDown = {handleOnKeyDown}\n        word = {emptyGuess}\n        bull = {\"\"}\n        cow = {\"\"}\n        disabled = {false}\n      />\n    <Alert severity={alert.severity} message = {alert.message} open={alert.open} handleOnClose={handleOnClose}/>\n    </div>\n  )\n};\n\nexport default Cowputer;","import { useContext } from \"react\"\nimport MyContext from \"../context/MyContext\"\n\nexport const hasRepeatingLetter = (word) => {\n    const letters = word.split(\"\")    \n    const setLetters = [...new Set(letters)]    \n    return letters.length !== setLetters.length\n}\n\n//bull - same location; cow - letter is present\nexport const getCowsAndBulls = (guess, roomId, socket, \n    updateGuesses, guessWord) => {    \n    guess = guess.toLowerCase()    \n\n    socket.once('cowsAndBullsScore', ({cowScore, bullScore}) =>{  \n        updateGuesses(guessWord, cowScore, bullScore);\n       \n    });\n    socket.emit(\"newGuess\", guess, roomId);    \n}"],"sourceRoot":""}