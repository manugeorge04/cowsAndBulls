{"version":3,"sources":["webpack:///./src/components/GameFilter.js","webpack:///./src/assets/CustomIcons.js","webpack:///./src/utils/rulesContent.js","webpack:///./src/components/RulesCarouselCard.js","webpack:///./src/components/RulesModal.js","webpack:///./src/components/Rules.js","webpack:///./src/fields/InputField.js","webpack:///./src/fields/SelectField.js","webpack:///./src/fields/RadioField.js","webpack:///./src/components/CreateJoinGame.js","webpack:///./src/hooks/UseFormHooks.js","webpack:///./src/components/CreateJoinContainer.js"],"names":["useStyles","makeStyles","theme","root","display","borderBottom","game","padding","color","marginBottom","fontFamily","fontWeight","active","GameFilter","classes","url","window","location","href","replace","className","to","exact","style","textDecoration","substr","lastIndexOf","borderRight","paddingRight","variant","paddingLeft","BullIcon","props","SvgIcon","xmlns","xmlnsXlink","preserveAspectRatio","width","height","viewBox","xlinkHref","x","y","CowIcon","wrapIcon","verticalAlign","Icon","breakpoints","down","Cowputer","Typography","paragraph","align","Bullfight","Herds","ScoringRules","paper","position","backgroundColor","palette","background","border","boxShadow","shadows","top","left","content","flexGrow","closeButton","zIndex","RulesCarouselCard","Slide","direction","in","mountOnEnter","unmountOnExit","Paper","IconButton","button","onClick","handleOnBackClick","fontSize","btnId","handleOnClose","handleOnForwardClick","RulesModal","useState","setBtnId","prev_btnId","setPrevBtnId","setDirection","incoming","toggleIncoming","useEffect","Open_BtnId","Modal","open","onClose","minWidth","isPC","flexDirection","justifyContent","alignItems","margin","textTransform","title","paddingBottom","CardHeaderWithStyle","withStyles","CardHeader","Rules","setOpen_BtnId","Card","CardContent","Button","inputField","error","InputField","name","label","defaultValue","handleInputValues","TextField","id","placeholder","onChange","FormHelperText","formControl","select","font","SelectField","values","selectedValue","handleSelectValues","FormControl","InputLabel","htmlFor","Select","native","value","inputProps","aria-label","map","val","index","key","marginLeft","RadioField","component","FormLabel","RadioGroup","FormControlLabel","control","Radio","type","textWrapper","initialValues","mode","rounds","roomId","CreateJoinGame","errors","setErrors","validations","fieldValues","formValues","validate","Object","every","isValidate","setFormValues","e","target","UseFormHook","preventDefault","console","log","marginTop","CreateJoinContainer","useMediaQuery","noSsr","Grid","container","spacing","item","xs"],"mappings":"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","file":"2.bundle.js","sourcesContent":["import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'inline-flex',\n    borderBottom: '0.1rem solid #000'\n  },\n  game: {\n    padding: '0.8rem',\n    color: '#000',\n    marginBottom: '1.2rem',\n    fontFamily: 'Comfortaa',\n    fontWeight: 300\n  },\n  active: {\n    fontWeight: 700\n  }\n}));\n\nconst GameFilter = () => {\n  const classes = useStyles();\n\n  const url = window.location.href.replace(/\\/$/, '');\n\n  return (\n    <div className={classes.root}>\n      <NavLink to=\"/\" exact={true} \n       style={{textDecoration: 'none'}}>\n        <Typography className={url.substr(url.lastIndexOf('/') + 1) === '#' ? `${classes.game} ${classes.active}` : `${classes.game}`}\n        style={{borderRight: '0.1rem solid #000', paddingRight: '1.2rem'}}\n        variant=\"h4\">Create Game</Typography>\n      </NavLink>\n      <NavLink to=\"/join\" \n      style={{textDecoration: 'none'}}>\n        <Typography className={url.substr(url.lastIndexOf('/') + 1) === 'join' ? `${classes.game} ${classes.active}` : `${classes.game}`} style={{paddingLeft: '1.2rem'}}\n        variant=\"h4\">Join Game</Typography>\n      </NavLink>\n    </div>\n  )\n};\n\nexport default GameFilter;\n","import React from 'react'\nimport { SvgIcon } from '@material-ui/core'\n\nexport const BullIcon = (props) => (\n  <SvgIcon {...props} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"xMidYMid\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\">\n    <image xlinkHref=\"data:img/png;base64,\" x=\"8\" y=\"30\" width=\"496\" height=\"450\"/>\n  </SvgIcon>\n)\n\n\nexport const CowIcon = (props) => (\n  <SvgIcon {...props} xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"xMidYMid\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\">\n  <image xlinkHref=\"data:img/png;base64,\" x=\"4\" y=\"28\" width=\"504\" height=\"458\"/>\n</SvgIcon>\n)\n\n","import React, {Fragment} from 'react'\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core';\nimport {CowIcon, BullIcon} from '../assets/CustomIcons';\n\nconst useStyles = makeStyles( (theme) => ({\n  \n  wrapIcon: {\n    verticalAlign: 'middle',\n    display: 'flex',    \n  },  \n  Icon: {\n    width: '10%',\n    [theme.breakpoints.down('sm')]: {\n      width: \"15%\",            \n    },\n    height: 'auto'\n  },\n\n}))\n\nexport const Cowputer = () => {return(\n  <Fragment>\n    <Typography variant=\"h1\" >\n       Cowputer\n    </Typography>\n    <Typography variant=\"h3\" paragraph={true}>\n      Friends being unreliabull!\n    </Typography>\n    <Typography variant=\"h4\" align=\"center\" paragraph={true}>\n    The computer provides the 4-letter word that you, the player must guess. Guess it within 12 turns and you get the round!\n    </Typography>    \n  </Fragment>  \n)}\n\n\nexport const Bullfight = () => {return(\n  <Fragment>\n    <Typography variant=\"h1\" >\n       Bullfight\n    </Typography>\n    <Typography variant=\"h3\" paragraph={true}>\n       Get ready for udder chaos!\n    </Typography>\n    <Typography variant=\"h4\" align=\"center\" paragraph={true}>\n    One player selected at random provides the 4-letter word that all other players must guess. It’s a race to the finish as all the players rush to guess the word first, but be careful, each player gets 12 guesses only!\n    </Typography>    \n  </Fragment>  \n)}\n\n\nexport const Herds = () => {return(\n  <Fragment>\n    <Typography variant=\"h1\" >\n       Herds\n    </Typography>\n    <Typography variant=\"h3\" paragraph={true}>\n       Time for a cowoperation!\n    </Typography>\n    <Typography variant=\"h4\" align=\"center\" paragraph={true}>\n    One random player from each team provides the 4-letter word that the other team must guess. The team that guesses the answer first wins the round. Each team gets 12 guesses in total distributed equally.\n    </Typography>    \n  </Fragment>    \n)}\n\nexport const ScoringRules = () => {\n  \n  const classes= useStyles()\n\n  return(\n  <Fragment>\n    <Typography variant=\"h4\" align=\"center\" paragraph={true}>\n        Enter a word and you will be told how many COWS and BULLS lie in it. Words having repeated letters will be considered invalid.\n        Eg: HOOF, EYES    \n    </Typography>     \n    <div className={classes.wrapIcon}>\n      <CowIcon  className={classes.Icon}/>\n      <Typography variant=\"h4\" align=\"center\" paragraph={true}  >        \n        COW is a correct letter\n        in the wrong position.\n        Eg: Ans- HIDE Guess- SKIN\n        I is a COW          \n      </Typography>\n    </div>   \n    <div className={classes.wrapIcon}>\n      <BullIcon className={classes.Icon} />\n      <Typography variant=\"h4\" align=\"center\"   >      \n        BULL is a correct letter\n        in the correct position.\n        Eg: Ans- CALF Guess- MILK\n        L is a BULL          \n      </Typography>      \n    </div>\n  </Fragment>\n)}","import React from'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper'\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\nimport {Cowputer, Herds, Bullfight, ScoringRules} from '../utils/rulesContent'\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    display:'flex',\n    width: \"50%\",    \n    height:'80%',\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],    \n    top: '10%',\n    left: '25%',\n    [theme.breakpoints.down('sm')]: {\n      width: \"100%\",      \n      top: '10%',\n      left: '0%'\n    },\n  },\n  content: {\n    flexGrow:'2',\n    padding:'2rem 0 2rem'\n  },\n  wrapIcon: {\n    verticalAlign: 'middle',\n    display: 'inline-flex'\n  },\n  closeButton: {\n    position:'absolute',\n    top:\"1%\",\n    left:'93%',\n    height:'20%',\n    zIndex:'20',\n    [theme.breakpoints.down('sm')]: {\n      left:'86%',\n    },    \n  }\n}));\n\nconst RulesCarouselCard = (props) => {\n  const classes= useStyles()  \n\n  return(\n    <Slide\n      direction={props.direction}\n      in={props.in}      \n      mountOnEnter\n      unmountOnExit\n    >\n    <Paper \n    variant=\"outlined\" \n    className={classes.paper}\n    >\n      <IconButton \n      className={classes.button}\n      onClick={props.handleOnBackClick}\n      >\n        <ArrowBackIosIcon fontSize=\"large\" />\n      </IconButton>      \n\n      <div className={classes.content}>\n        {props.btnId===3 && <Cowputer />}\n        {props.btnId===2 && <Bullfight/>}\n        {props.btnId===1 && <Herds />}\n        <ScoringRules />\n      </div>        \n\n      <div className={classes.closeButton}>\n      <IconButton color=\"primary\" onClick={props.handleOnClose}>\n        <CloseIcon fontSize=\"large\"/>\n      </IconButton>\n      </div>\n      <IconButton \n      className={classes.button}\n      onClick={props.handleOnForwardClick}\n      >\n        <ArrowForwardIosIcon fontSize=\"large\" />\n      </IconButton>\n      \n    </Paper>\n    </Slide>\n  )\n}\n\nexport default RulesCarouselCard","import React, { useState, useEffect, Fragment } from 'react'\nimport Modal from '@material-ui/core/Modal'\nimport RulesCarouselCard from './RulesCarouselCard';\n\nconst RulesModal = (props) => {    \n  const [btnId, setBtnId] = useState(0)\n  const [prev_btnId, setPrevBtnId] = useState(0)\n  const [direction, setDirection] = useState('up')\n  const [incoming, toggleIncoming] = useState(true)\n\n  useEffect(() => {    \n    setBtnId(props.Open_BtnId.btnId)\n  },[props.Open_BtnId.btnId])  \n\n  const handleOnBackClick= () => { \n    setPrevBtnId(btnId)   \n    setBtnId(btnId-1===0?3:btnId-1)\n    setDirection('right')\n    toggleIncoming(!incoming)    \n  }\n\n  const handleOnForwardClick = () => {\n    setPrevBtnId(btnId)\n    setBtnId(btnId+1===4?1:btnId+1)\n    setDirection('left')\n    toggleIncoming(!incoming)\n  }\n\n  return(\n    <Modal\n      open={props.Open_BtnId.open}\n      onClose={()=>{ \n          setDirection('up')\n          props.handleOnClose()\n        }}      \n    >\n      <Fragment>    { //gives a warning if RulesCarousel isn;t wrapped with Fragment; need to figure out why!\n                    }\n        <RulesCarouselCard \n          direction={incoming==false?direction==='left'? 'right': 'left':direction}\n          in={incoming}\n          btnId={incoming===false?prev_btnId:btnId}\n          handleOnForwardClick={handleOnForwardClick}\n          handleOnBackClick={handleOnBackClick}\n          handleOnClose={props.handleOnClose}\n        />       \n        <RulesCarouselCard \n          direction={incoming==false?direction:direction==='left'? 'right': 'left'}\n          in={!incoming}\n          btnId={!incoming===false?prev_btnId:btnId}\n          handleOnForwardClick={handleOnForwardClick}\n          handleOnBackClick={handleOnBackClick}\n          handleOnClose={props.handleOnClose}\n        />  \n      </Fragment>\n    </Modal>\n  )\n}\n\nexport default RulesModal","import React, { Fragment, useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport { Typography } from '@material-ui/core';\n\nimport RulesModal from '../components/RulesModal'\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: '22.5rem',\n    boxShadow: '0px 0px 17px 1px #1D1F26',\n    backgroundColor: '#fff',\n    border: '0.1rem solid #000',\n    height: props => props.isPC ? '50rem' : '40rem'\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    fontSize: '2.4rem',\n    width: props => props.isPC ? '50%' : '80%',\n    backgroundColor: '#0b5394',\n    color: \"#fff\",\n    margin: '1.5rem',\n    fontWeight: 300,\n    textTransform: 'capitalize',\n    '&:hover': {\n      backgroundColor: '#073763ff'\n    }\n  },\n  title: {\n    fontSize: props => props.isPC ? '2.4rem' : '2rem',\n    fontWeight: 500,\n    width: props => props.isPC ? '80%' : '100%',\n    paddingBottom: '1.6rem',\n    height: '8rem'  \n  },\n});\n\nconst CardHeaderWithStyle = withStyles((props) => ({\n  title: {\n    // fontSize: props => props.isPC ? '2.4rem' : '2rem',\n    fontWeight: 500,\n    // width: props => props.isPC ? '80%' : '100%',\n    paddingBottom: '1.6rem',\n    height: '8rem'  \n  },\n  content: {\n    borderBottom: '0.1rem solid #000'\n  },\n  root: {\n    padding: '1.2rem 0',\n    height: '10rem'\n  }\n}))(CardHeader);\n\nconst Rules = (props) => {\n  const { isPC } = props;\n  const classes = useStyles(props);\n  const [Open_BtnId, setOpen_BtnId] = useState({open:false, btnId:0})\n  const handleOnClose = () => {\n    return setOpen_BtnId({open:false})\n  }\n \n  return (\n    <Fragment>\n      <Card className={classes.root}>\n        <CardHeaderWithStyle\n          title={<Typography className={classes.title}>Butter read these first, check out our modes</Typography>}\n        />\n        <CardContent className={classes.content}>\n        <Button  \n          className={classes.button}\n          onClick={() => (setOpen_BtnId({open:true, btnId:1}))}\n        >\n          Herds</Button>\n        <Button className={classes.button}\n        onClick={() => (setOpen_BtnId({open:true, btnId:2}))}\n        >\n          Bullfight</Button>\n        <Button className={classes.button}\n        onClick={() => (setOpen_BtnId({open:true, btnId:3}))}\n        >\n          Cowputer</Button>\n        </CardContent>\n      </Card>\n      <RulesModal  Open_BtnId={Open_BtnId} handleOnClose={handleOnClose}/>\n    </Fragment>\n  );\n}\n\nexport default Rules;","import React, { Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nconst useStyles = makeStyles({\n  root: {\n  },\n  inputField: {\n    width: '100%',\n    fontSize: '2.4rem',\n    // marginBottom: '1.2rem'\n  },\n  error: {\n    color: 'red !important'\n  }\n});\n\nconst InputField = (props) => {\n  const { name, label, defaultValue, error, handleInputValues } = props;\n  const classes = useStyles();\n\n  return (\n    <Fragment>\n       <TextField\n          id={name}\n          label={label}\n          name={name}\n          placeholder={defaultValue}\n          // helperText={error}\n          // error={!!error}\n          variant=\"outlined\"\n          onChange={handleInputValues}\n          className={`${classes.inputField} ${classes.root}`}\n        />\n        <FormHelperText className={classes.error}\n        style={{marginBottom: '1.2rem'}}>{error}</FormHelperText>\n    </Fragment>\n  );\n}\n\nexport default InputField;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    minWidth: 120,\n    width: '100%',\n    marginBottom: '1.2rem',\n    '& .MuiSvgIcon-root': {\n      width: '5rem',\n      height: '2.5rem'\n    },\n  },\n  error: {\n    color: 'red !important'\n  },\n  select: {\n    ' & .MuiInputBase-input':{\n      font: 'revert',\n      fontFamily: 'Comfortaa'\n    }\n\n  }\n}));\n\nconst SelectField = (props) => {\n  const { name, label, values, error, selectedValue, handleSelectValues } = props;\n  const classes = useStyles();\n \n  return (\n    <FormControl variant=\"outlined\" className={classes.formControl}>\n    <InputLabel htmlFor={name}>{label}</InputLabel>\n    <Select\n      native\n      className={classes.select}\n      value={selectedValue}\n      onChange={handleSelectValues}\n      label={label}\n      inputProps={{\n        name: name,\n        id: 'select-modes',\n      }}\n    >\n      <option aria-label=\"None\" value=\"\" />\n     { values.map((val, index) => (\n       <option key={index} value={`${val}`}>{val}</option>\n     ))}\n    </Select>\n    <FormHelperText className={classes.error}\n    style={{marginLeft: 0}}>{error}</FormHelperText>\n  </FormControl>\n  );\n}\n\nexport default SelectField;","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport { makeStyles } from '@material-ui/core/styles';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    minWidth: 120,\n    width: '100%',\n    marginBottom: '1.2rem',\n    '& .MuiFormGroup-root': {\n      flexDirection: 'row'\n    },\n    '& .MuiFormLabel-root': {\n      backgroundColor: '#fff',\n      fontSize: '1.6rem'\n    },\n    '& .MuiTypography-body1': {\n      fontSize: '1.6rem'\n    },\n    '& .MuiSvgIcon-root': {\n      width: '2rem',\n      height: '2rem'\n    },\n    '& .MuiIconButton-label': {\n      width: '5rem'\n    }\n  },\n  error: {\n    color: 'red !important'\n  }\n}));\n\nconst RadioField = (props) => {\n  const { label, values, name, selectedValue, handleSelectValues, error } = props;\n  const classes = useStyles();\n\n  return (\n      <FormControl component=\"fieldset\" className={classes.formControl}>\n      <FormLabel component=\"legend\">{label}</FormLabel>\n        <RadioGroup aria-label=\"rounds\" name={name} value={selectedValue} onChange={handleSelectValues}>\n        {values.map((val, index) => (\n          <FormControlLabel\n          key={index} value={val} name={name} control={<Radio/>} label={val} />\n        ))}\n      </RadioGroup>\n      <FormHelperText className={classes.error}\n      >{error}</FormHelperText>\n      </FormControl>\n  );\n}\n\nexport default RadioField;","import React, { useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport { Typography } from '@material-ui/core';\n\nimport InputField from '../fields/InputField';\nimport SelectField from '../fields/SelectField';\nimport RadioField from '../fields/RadioField';\n\nimport { UseFormHook } from '../hooks/UseFormHooks';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: '22.5rem',\n    boxShadow: '0px 0px 17px 1px #1D1F26',\n    backgroundColor: '#fff',\n    border: '0.1rem solid #000',\n    height: props => props.type === 'join' && !props.isPC ? '38rem' : '50rem',\n    '& .MuiTextField-root': {\n      width: '100%',\n      fontSize: '2rem',\n      color: '#000',\n      border: '1px solid white'\n    },\n    '& .MuiFormHelperText-root': {\n      fontSize: '1rem',\n      color: '#000',\n    }, \n    '& .MuiInputLabel-root': {\n      fontSize: '1.3rem',\n      backgroundColor: \"white\",\n      paddingRight: '.5rem',\n      color: '#000',\n    },\n    '& .MuiInputBase-input': {\n      fontSize: '1.7rem',\n      backgroundColor: \"#f3f3f3ff\"\n    }\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  textWrapper: {\n    fontSize: '2.4rem',\n    width: props => props.isPC ? '60%' : '80%'\n  },\n  inputField: {\n    width: '100%',\n    fontSize: '2.4rem',\n    marginBottom: '1.2rem'\n  },\n  button: {\n    fontSize: '2.4rem',\n    width: props => props.isPC ? '30%' : '70%',\n    backgroundColor: '#0b5394',\n    color: \"#fff\",\n    // margin: '1.2rem',\n    fontWeight: 300,\n    textTransform: 'capitalize',\n    '&:hover': {\n      backgroundColor: '#073763ff'\n    }\n  },\n  title: {\n    fontSize: '2.8rem',\n    fontWeight: 500,\n    width: props => props.isPC ? '80%' : '100%',\n    paddingBottom: '1.6rem',\n    height: '8rem' \n  },\n});\n\nconst CardHeaderWithStyle = withStyles((props) => ({\n  title: {\n    fontSize: '2.8rem',\n    fontWeight: 500,\n    // width: props => props.isPC ? '80%' : '100%',\n    paddingBottom: '1.6rem',\n    height: '8rem' \n  },\n  content: {\n    borderBottom: '0.1rem solid #000'\n  },\n  root: {\n    padding: '1.2rem 0',\n    height: '10rem'\n  }\n}))(CardHeader);\n\nconst initialValues = {\n  name: \"Enter your name\",\n  mode: \"\",\n  rounds: \"\",\n  roomId: \"\"\n}\n\nconst CreateJoinGame = (props) => {\n  const { type, isPC } = props;\n  const classes = useStyles(props);\n  const [ errors, setErrors ] = useState({});\n\n  const validations = (fieldValues = formValues) => {\n    let validate = {...errors};\n\n    if('name' in fieldValues) {\n      validate.name = (fieldValues.name === \"\" || fieldValues.name === \"Enter your name\")  ? \"Please enter your name\" : \"\";\n      \n    }\n\n    if(type === 'create') {\n      if('mode' in fieldValues) {\n        validate.mode = fieldValues.mode !== \"\" ? \"\" : \"Please select a game mode\"\n      }\n  \n      if('rounds' in fieldValues) {\n        validate.rounds = fieldValues.rounds !== \"\" ? \"\" : \"Please select number of rounds\"\n      }\n    }\n\n    if(type === 'join') {\n      if('roomId' in fieldValues) {\n        validate.roomId = fieldValues.roomId !== \"\" ? \"\" : \"Please enter a room ID\"\n      }\n    }\n\n    setErrors({...validate});\n\n    if(fieldValues == formValues) {\n      return Object.values(validate).every((val) => val === \"\")\n    }\n\n  }\n\n  const { formValues, handleInputValues, handleSelectValues } = UseFormHook(initialValues, true, validations);\n  \n  const onsubmit = (e) => {\n    e.preventDefault();\n    if(validations()) {\n      console.log(\"allow host\")\n    }\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardHeaderWithStyle\n        title={<Typography className={classes.title}>Hay there!</Typography>}\n      />\n      <CardContent className={classes.content}>\n        <div className={classes.textWrapper}>\n        <InputField\n          id=\"name\"\n          label=\"Name\"\n          name=\"name\"\n          defaultValue={formValues.name}\n          error={errors.name}\n          variant=\"outlined\"\n          handleInputValues={handleInputValues}\n        />\n        {type === 'create' && <SelectField\n        name=\"mode\"\n        label=\"Modes\"\n        values={['Herds', 'Bullfight', 'Cowputer']}\n        error={errors.mode}\n        selectedValue={formValues.mode}\n        handleSelectValues={handleSelectValues}\n        />}\n        {type === 'create' && <RadioField\n        name=\"rounds\"\n        label=\"Rounds\"\n        values={[\"3\",\"6\",\"10\"]}\n        selectedValue={formValues.rounds}\n        handleSelectValues={handleSelectValues}\n        error={errors.rounds}\n        />}\n        {type === 'join' && <InputField\n          id=\"room-id\"\n          name=\"roomId\"\n          label=\"Room ID\"\n          defaultValue=\"Enter your room ID\"\n          error={errors.roomId}\n        />}\n        </div>\n       <Button className={classes.button}\n       onClick={onsubmit}>\n        {type === 'join' ? \"Join\" : \"Host\" }</Button>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default CreateJoinGame;","import { useState } from 'react';\n\nexport const UseFormHook = (initialValues, isValidate, validations) => {\n  const [formValues, setFormValues] = useState(initialValues);\n  \n  const handleInputValues = (e) => {\n    const { name, value } = e.target;\n      setFormValues({\n        ...formValues,\n        [name]: value,\n      });\n\n      if(isValidate) {\n        validations({[name]: value})\n      }\n  };\n\n  const handleSelectValues = (e) => {\n    const { name, value } = e.target;\n\n      setFormValues({\n        ...formValues,\n        [name]: value,\n      });\n\n      if(isValidate) {\n        validations({ [name] : value })\n      }\n  };\n\n  \n  return {\n    formValues, \n    setFormValues,\n    handleInputValues,\n    handleSelectValues\n  }\n};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { useMediaQuery } from \"@material-ui/core\";\n\nimport Rules from './Rules';\nimport CreateJoinGame from './CreateJoinGame';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    padding: '3.2rem',\n    width: '70%',\n    margin: '0 auto',\n    marginTop: '2.4rem',\n    display: 'flex',\n  },\n}));\n\n\nconst CreateJoinContainer = (props) => {\n  const { type } = props;\n  const classes = useStyles();\n  const isPC = useMediaQuery(\"(min-width:768px)\", {noSsr:true})    \n  return (\n    <Grid container style={{flexDirection: !isPC && 'column', padding: !isPC && '0'}}\n     className={classes.root} align=\"center\" spacing={2}>\n      <Grid item xs={!isPC ? 12 : 6}>\n        <Rules isPC={isPC}/>\n      </Grid>\n      <Grid item xs={!isPC ? 12 : 6}>\n      <CreateJoinGame isPC={isPC} type={type}/>\n      </Grid>\n    </Grid>\n  )\n};\n\nexport default CreateJoinContainer;"],"sourceRoot":""}